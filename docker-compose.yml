services:
  # PostgreSQL Database
  db:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: telemetry-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-car_telemetry}
      POSTGRES_USER: ${POSTGRES_USER:-telemetry}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-telemetry123}
    ports:
      - "5432:5432"
    # volumes:
    #   - postgres-data:/var/lib/postgresql/data
    # ^ Commented out = fresh database on each restart (no persistent data)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telemetry"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telemetry-network

  # Backend Service (API + Telemetry Receiver)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telemetry-backend
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-car_telemetry}
      POSTGRES_USER: ${POSTGRES_USER:-telemetry}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-telemetry123}
      API_PORT: 3000
      TELEMETRY_PORT: 8080
    ports:
      - "3000:3000"  # API port
      - "8080:8080"  # Telemetry receiver port
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - telemetry-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: telemetry-frontend
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - telemetry-network
    restart: unless-stopped

networks:
  telemetry-network:
    driver: bridge

# volumes:
#   postgres-data:
#     driver: local
# ^ No volumes = data gets wiped on restart (starts fresh every time)

